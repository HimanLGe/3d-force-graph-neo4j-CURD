
export default class Manager {
    constructor(gptUtil) {

        this.NWG = window.GraphApp.NWG
        this.basic = window.GraphApp.basic
        this.Graph = window.GraphApp.Graph;

        this.question = ""
        this.serializedData = ""
        this.gptUtil = gptUtil;
        this.answer = ""
        this.cNodeId = "" //当前节点id
        this.cNode = null
        this.selectedNodes = null


        this.gptUtil.setMessageEvent(async (event) => {
            console.log("message", event.data)
            if (event.data == "[DONE]") return;
            const jsonData = JSON.parse(event.data);
            this.answer += jsonData["choices"][0]["delta"]["content"]
            this.cNode.properties.name = this.answer
            await this.NWG.setNode(this.cNode)
            this.Graph.nodeColor(this.Graph.nodeColor());
        })
        
    }
  
    serializeNodes() { 
        
        this.selectedNodes = window.GraphApp.eventManager.selectedNodes
        this.selectedNodes.forEach((n) => { 
            this.serializedData += n.properties.name
        })

    }

    async genNewNodeAndLink() {
        //当前策略是所有节点连到新增检点
        let node = this.NWG.initNode();
        this.cNodeId = (await this.NWG.addNodes([node]))[0]
        console.log("cNodeId is"+this.cNodeId)
        this.cNode = this.basic.getNodeById(this.cNodeId)
        let rel = this.NWG.initRelationship()
        rel.properties.name = this.question
        this.selectedNodes.forEach((n) => {
            this.NWG.addRelationships(n,rel,this.cNode)//非异步，数据多了会不会出问题
        })

    }

    setQuestion() {
        this.question = prompt("请输入提问")
        this.serializedData += this.question
    }

    genAnswer() {
        
        this.gptUtil.ask(this.serializedData)

    }

    resetData() {
        this.question = ""
        this.answer = ""
        this.serializedData = ""
    }
    
    async start() {
        this.resetData()
        this.serializeNodes()
        this.setQuestion()
        await this.genNewNodeAndLink()
        this.genAnswer()
    }
    
  }
  